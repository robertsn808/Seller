import { pgTable, text, serial, integer, boolean, timestamp, decimal, jsonb } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").unique().notNull(),
  email: text("email").unique().notNull(),
  hashedPassword: text("hashed_password").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Business tables
export const businesses = pgTable("businesses", {
  id: text("id").primaryKey(), // 'allii-fish-market' or 'allii-coconut-water'
  name: text("name").notNull(),
  type: text("type").notNull(), // 'restaurant' or 'beverage'
  description: text("description"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Customers for each business
export const customers = pgTable("customers", {
  id: serial("id").primaryKey(),
  businessId: text("business_id").notNull().references(() => businesses.id),
  firstName: text("first_name").notNull(),
  lastName: text("last_name").notNull(),
  email: text("email").notNull(),
  phone: text("phone"),
  city: text("city"),
  state: text("state"),
  orderCount: integer("order_count").default(0),
  totalSpent: decimal("total_spent", { precision: 10, scale: 2 }).default("0"),
  lastOrderDate: timestamp("last_order_date"),
  loyaltyTier: text("loyalty_tier").default("bronze"), // bronze, silver, gold, platinum
  customerSince: timestamp("customer_since").defaultNow().notNull(),
  preferences: jsonb("preferences"),
});

// Menu items for each business
export const menuItems = pgTable("menu_items", {
  id: serial("id").primaryKey(),
  businessId: text("business_id").notNull().references(() => businesses.id),
  name: text("name").notNull(),
  description: text("description"),
  price: decimal("price", { precision: 8, scale: 2 }).notNull(),
  category: text("category").notNull(),
  isAvailable: boolean("is_available").default(true),
  isPopular: boolean("is_popular").default(false),
  prepTime: integer("prep_time"), // in minutes
  ingredients: jsonb("ingredients"),
  allergens: jsonb("allergens"),
  calories: integer("calories"),
  image: text("image"),
  customizations: jsonb("customizations"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Inventory for each business
export const inventory = pgTable("inventory", {
  id: serial("id").primaryKey(),
  businessId: text("business_id").notNull().references(() => businesses.id),
  name: text("name").notNull(),
  category: text("category").notNull(),
  currentStock: integer("current_stock").default(0),
  minStock: integer("min_stock").default(0),
  maxStock: integer("max_stock").notNull(),
  unit: text("unit").notNull(),
  costPerUnit: decimal("cost_per_unit", { precision: 8, scale: 2 }),
  supplier: text("supplier"),
  lastRestocked: timestamp("last_restocked"),
  expiryDate: timestamp("expiry_date"),
  location: text("location"),
  status: text("status").default("in-stock"), // in-stock, low-stock, out-of-stock, expired
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Orders for each business
export const orders = pgTable("orders", {
  id: serial("id").primaryKey(),
  businessId: text("business_id").notNull().references(() => businesses.id),
  customerId: integer("customer_id").references(() => customers.id),
  customerName: text("customer_name").notNull(),
  customerEmail: text("customer_email").notNull(),
  items: jsonb("items").notNull(), // array of order items
  total: decimal("total", { precision: 10, scale: 2 }).notNull(),
  status: text("status").default("pending"), // pending, preparing, ready, completed, cancelled
  orderDate: timestamp("order_date").defaultNow().notNull(),
  estimatedTime: integer("estimated_time"), // in minutes
  notes: text("notes"),
  paymentMethod: text("payment_method"),
  deliveryMethod: text("delivery_method"), // pickup, delivery
  deliveryAddress: text("delivery_address"),
});

// Content generated by AI for each business
export const generatedContent = pgTable("generated_content", {
  id: serial("id").primaryKey(),
  businessId: text("business_id").notNull().references(() => businesses.id),
  title: text("title").notNull(),
  content: text("content").notNull(),
  type: text("type").notNull(), // social-post, blog-article, email-campaign, etc.
  platform: text("platform"), // instagram, facebook, twitter, etc.
  tone: text("tone"),
  targetAudience: text("target_audience"),
  keywords: jsonb("keywords"),
  callToAction: text("call_to_action"),
  status: text("status").default("draft"), // draft, published, scheduled
  aiGeneratedAt: timestamp("ai_generated_at").defaultNow().notNull(),
});

// AI insights for each business
export const aiInsights = pgTable("ai_insights", {
  id: serial("id").primaryKey(),
  businessId: text("business_id").notNull().references(() => businesses.id),
  title: text("title").notNull(),
  content: text("content").notNull(),
  type: text("type").notNull(), // trend-analysis, competitor-analysis, sentiment-analysis
  category: text("category"),
  priority: text("priority").default("medium"), // low, medium, high
  actionable: boolean("actionable").default(false),
  metadata: jsonb("metadata"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Marketing campaigns for each business
export const campaigns = pgTable("campaigns", {
  id: serial("id").primaryKey(),
  businessId: text("business_id").notNull().references(() => businesses.id),
  name: text("name").notNull(),
  description: text("description"),
  type: text("type").notNull(), // email, social, paid-ads
  status: text("status").default("draft"), // draft, active, paused, completed
  startDate: timestamp("start_date"),
  endDate: timestamp("end_date"),
  budget: decimal("budget", { precision: 10, scale: 2 }),
  targetAudience: jsonb("target_audience"),
  metrics: jsonb("metrics"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Zod schemas for validation
export const insertUserSchema = createInsertSchema(users);
export const insertBusinessSchema = createInsertSchema(businesses);
export const insertCustomerSchema = createInsertSchema(customers);
export const insertMenuItemSchema = createInsertSchema(menuItems);
export const insertInventorySchema = createInsertSchema(inventory);
export const insertOrderSchema = createInsertSchema(orders);
export const insertGeneratedContentSchema = createInsertSchema(generatedContent);
export const insertAiInsightSchema = createInsertSchema(aiInsights);
export const insertCampaignSchema = createInsertSchema(campaigns);

// TypeScript types
export type User = typeof users.$inferSelect;
export type Business = typeof businesses.$inferSelect;
export type Customer = typeof customers.$inferSelect;
export type MenuItem = typeof menuItems.$inferSelect;
export type InventoryItem = typeof inventory.$inferSelect;
export type Order = typeof orders.$inferSelect;
export type GeneratedContent = typeof generatedContent.$inferSelect;
export type AiInsight = typeof aiInsights.$inferSelect;
export type Campaign = typeof campaigns.$inferSelect;

export type InsertUser = z.infer<typeof insertUserSchema>;
export type InsertBusiness = z.infer<typeof insertBusinessSchema>;
export type InsertCustomer = z.infer<typeof insertCustomerSchema>;
export type InsertMenuItem = z.infer<typeof insertMenuItemSchema>;
export type InsertInventoryItem = z.infer<typeof insertInventorySchema>;
export type InsertOrder = z.infer<typeof insertOrderSchema>;
export type InsertGeneratedContent = z.infer<typeof insertGeneratedContentSchema>;
export type InsertAiInsight = z.infer<typeof insertAiInsightSchema>;
export type InsertCampaign = z.infer<typeof insertCampaignSchema>;